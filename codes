#!/usr/bin/env python3
import os, time, subprocess, shutil
from pathlib import Path

# paths — update if different
PROJECT_DIR = str(Path.home() / "NeoArm")
VISION_MODULE_PATH = os.path.join(PROJECT_DIR, "vision", "vision_module.py")
# Ensure vision package importable: add project dir to path
import sys
if PROJECT_DIR not in sys.path:
    sys.path.insert(0, PROJECT_DIR)

# start streamer command (same as your manual command)
RPICAM_CMD = [
    "/usr/bin/rpicam-vid",
    "-t", "0",
    "--inline",
    "--listen",
    "-o", "tcp://0.0.0.0:8554",
    "--width", "1280",
    "--height", "720",
    "--framerate", "30",
    "--roi", "0.0,0.0,1.0,1.0",
]

def start_streamer():
    if shutil.which("rpicam-vid") is None:
        print("rpicam-vid not found in PATH. Start it manually if needed.")
        return None
    p = subprocess.Popen(RPICAM_CMD, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    print("[main] started rpicam-vid pid=", p.pid)
    return p

def stop_process(p):
    if p is None:
        return
    try:
        p.terminate()
        try:
            p.wait(timeout=2.0)
        except subprocess.TimeoutExpired:
            p.kill()
    except Exception as e:
        print("error stopping process:", e)

# import the module and VisionRunner
try:
    from vision.vision_module import VisionRunner
except Exception as e:
    print("Failed to import vision_module:", e)
    raise

# This will be called whenever VisionRunner selects a category
def on_category(cat):
    print("[MAIN] category callback:", cat)
    # connect this to your NeoArm logic:
    # if cat == "hard": strong_grip()
    # elif cat == "soft": soft_grip()
    # else: relax_grip()

def main():
    streamer = start_streamer()
    # give streamer time to initialize
    time.sleep(1.5)

    runner = VisionRunner(source="tcp://127.0.0.1:8554", vote_window=5, cooldown=30, callback=on_category, verbose=True)
    runner.start()
    print("[main] VisionRunner started. Waiting for categories... (Ctrl+C to stop)")

    try:
        while True:
            time.sleep(0.5)
            # optional: monitor runner and restart if died
            if not runner.is_running():
                print("[main] VisionRunner not running, exiting.")
                break
    except KeyboardInterrupt:
        print("[main] KeyboardInterrupt — stopping")
    finally:
        runner.stop()
        stop_process(streamer)
        print("[main] exited cleanly")

if __name__ == "__main__":
    main()
