#!/usr/bin/env python3
import os
import time
import subprocess
from vision_module import VisionRunner

# ===========================
# SETTINGS
# ===========================
STREAM_CMD = (
    "/usr/bin/rpicam-vid -t 0 --inline --listen "
    "-o tcp://0.0.0.0:8554 "
    "--width 1280 --height 720 "
    "--framerate 30 "
    "--roi 0.0,0.0,1.0,1.0"
)
TCP_SOURCE = "tcp://127.0.0.1:8554"
VOTE_WINDOW = 5
COOLDOWN = 0  # set 0 so it doesn't pause after detection
VERBOSE = True

# ===========================
# CALLBACK FUNCTION
# ===========================
def on_category(category):
    """
    This is called whenever the vision module finalizes a detection.
    You can send this category to your motor or grip control logic here.
    """
    print(f"[MAIN] Category detected -> {category}")
    # Example placeholder:
    if category == "hard":
        print("[MAIN] >>> Trigger HARD grip sequence")
        # TODO: send signal to main control
    elif category == "soft":
        print("[MAIN] >>> Trigger SOFT grip sequence")
    else:
        print("[MAIN] >>> No valid category detected")


# ===========================
# STARTUP
# ===========================
def start_stream():
   
    print("[MAIN] Starting rpicam-vid stream...")
    proc = subprocess.Popen(
        STREAM_CMD,
        shell=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        preexec_fn=os.setpgrp  # avoid killing on Ctrl+C
    )
    print(f"[MAIN] Stream started (pid={proc.pid})")
    return proc


def main():
    stream_proc = start_stream()
    time.sleep(2)  # small wait to ensure stream is ready

    print("[MAIN] Starting VisionRunner...")
    runner = VisionRunner(
        source=TCP_SOURCE,
        vote_window=VOTE_WINDOW,
        cooldown=COOLDOWN,
        callback=on_category,
        verbose=VERBOSE
    )
    runner.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n[MAIN] Stopping vision system...")
        runner.stop()
        try:
            os.killpg(os.getpgid(stream_proc.pid), 15)
        except Exception:
            pass
        print("[MAIN] Exited cleanly.")


if __name__ == "__main__":
    main()
